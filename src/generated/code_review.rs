// This file was generated by Sigil. Do not edit manually.

/// Reviews code for quality and security
#[derive(Debug, Clone)]
pub struct CodeReview {
    pub areas: Vec<String>,
    pub format: Option<String>,
    pub language: Option<String>,
    pub project_info: Option<String>,
    pub source_code: String,
}

impl CodeReview {
    pub fn builder() -> CodeReviewBuilder {
        CodeReviewBuilder::default()
    }
}

#[derive(Default)]
pub struct CodeReviewBuilder {
    areas: Option<Vec<String>>,
    format: Option<String>,
    language: Option<String>,
    project_info: Option<String>,
    source_code: Option<String>,
}

impl CodeReviewBuilder {
    pub fn add_areas(mut self, item: impl Into<String>) -> Self {
        self.areas.get_or_insert_with(Vec::new).push(item.into());
        self
    }

    pub fn format(mut self, value: impl Into<String>) -> Self {
        self.format = Some(value.into());
        self
    }

    pub fn language(mut self, value: impl Into<String>) -> Self {
        self.language = Some(value.into());
        self
    }

    pub fn project_info(mut self, value: impl Into<String>) -> Self {
        self.project_info = Some(value.into());
        self
    }

    pub fn source_code(mut self, value: impl Into<String>) -> Self {
        self.source_code = Some(value.into());
        self
    }

    pub fn build(self) -> Result<CodeReview, &'static str> {
        Ok(CodeReview {
            areas: self.areas.unwrap_or_default(),
            format: self.format.or(Some("markdown".to_string())),
            language: self.language.or(Some("rust".to_string())),
            project_info: self.project_info,
            source_code: self.source_code.ok_or("source_code is required")?,
        })
    }
}

impl CodeReview {
    pub fn render_xml(&self) -> String {
        let mut output = String::new();
        output.push_str("<system>");
        output.push_str("You are an expert code reviewer specializing in ");
        output.push_str(self.language.as_deref().unwrap_or("rust"));
        output.push_str(".");
        output.push_str("</system>\n\n");
        if self.project_info.is_some() {
        output.push_str("<context>");
        output.push_str("Project: ");
        if let Some(ref value) = self.project_info {
            output.push_str(value);
        }
        output.push_str("</context>\n\n");
        }
        output.push_str("<code>");
        output.push_str("```");
        output.push_str(self.language.as_deref().unwrap_or("rust"));
        output.push_str("\n");
        output.push_str(&self.source_code);
        output.push_str("\n```\n");
        output.push_str("</code>\n\n");
        if !self.areas.is_empty() {
        output.push_str("<focus_areas>");
        output.push_str("Pay attention to:\n");
        for item in &self.areas {
            output.push_str("- ");
            output.push_str(item);
            output.push_str("\n");
        }
        output.push_str("</focus_areas>\n\n");
        }
        output.push_str("<output>");
        output.push_str("Provide analysis in ");
        output.push_str(self.format.as_deref().unwrap_or("markdown"));
        output.push_str(" format.");
        output.push_str("</output>\n\n");
        output.trim_end().to_string()
    }

    pub fn render_markdown(&self) -> String {
        let mut output = String::new();
        output.push_str("# System\n\n");
        output.push_str("You are an expert code reviewer specializing in ");
        output.push_str(self.language.as_deref().unwrap_or("rust"));
        output.push_str(".");
        if !output.ends_with('\n') {
            output.push_str("\n");
        }
        output.push_str("\n");
        if self.project_info.is_some() {
        output.push_str("# Context\n\n");
        output.push_str("Project: ");
        if let Some(ref value) = self.project_info {
            output.push_str(value);
        }
        if !output.ends_with('\n') {
            output.push_str("\n");
        }
        output.push_str("\n");
        }
        output.push_str("# Code\n\n");
        output.push_str("```");
        output.push_str(self.language.as_deref().unwrap_or("rust"));
        output.push_str("\n");
        output.push_str(&self.source_code);
        output.push_str("\n```\n");
        if !output.ends_with('\n') {
            output.push_str("\n");
        }
        output.push_str("\n");
        if !self.areas.is_empty() {
        output.push_str("# Focus Areas\n\n");
        output.push_str("Pay attention to:\n");
        for item in &self.areas {
            output.push_str("- ");
            output.push_str(item);
            output.push_str("\n");
        }
        if !output.ends_with('\n') {
            output.push_str("\n");
        }
        output.push_str("\n");
        }
        output.push_str("# Output\n\n");
        output.push_str("Provide analysis in ");
        output.push_str(self.format.as_deref().unwrap_or("markdown"));
        output.push_str(" format.");
        if !output.ends_with('\n') {
            output.push_str("\n");
        }
        output.push_str("\n");
        output.trim_end().to_string()
    }

    pub fn render_plain(&self) -> String {
        let mut output = String::new();
        output.push_str("SYSTEM:\n");
        output.push_str("You are an expert code reviewer specializing in ");
        output.push_str(self.language.as_deref().unwrap_or("rust"));
        output.push_str(".");
        if !output.ends_with('\n') {
            output.push_str("\n");
        }
        output.push_str("\n");
        if self.project_info.is_some() {
        output.push_str("CONTEXT:\n");
        output.push_str("Project: ");
        if let Some(ref value) = self.project_info {
            output.push_str(value);
        }
        if !output.ends_with('\n') {
            output.push_str("\n");
        }
        output.push_str("\n");
        }
        output.push_str("CODE:\n");
        output.push_str(&self.source_code);
        output.push_str("\n");
        if !output.ends_with('\n') {
            output.push_str("\n");
        }
        output.push_str("\n");
        if !self.areas.is_empty() {
        output.push_str("FOCUS_AREAS:\n");
        output.push_str("Pay attention to:\n");
        for item in &self.areas {
            output.push_str("- ");
            output.push_str(item);
            output.push_str("\n");
        }
        if !output.ends_with('\n') {
            output.push_str("\n");
        }
        output.push_str("\n");
        }
        output.push_str("OUTPUT:\n");
        output.push_str("Provide analysis in ");
        output.push_str(self.format.as_deref().unwrap_or("markdown"));
        output.push_str(" format.");
        if !output.ends_with('\n') {
            output.push_str("\n");
        }
        output.push_str("\n");
        output.trim_end().to_string()
    }
}

