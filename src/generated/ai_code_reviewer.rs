// This file was generated by Sigil. Do not edit manually.

/// Comprehensive AI code review with security, performance, and style analysis
#[derive(Debug, Clone)]
pub struct AICodeReviewer {
    pub additional_context: Option<String>,
    pub branch: Option<String>,
    pub expertise: Vec<String>,
    pub file_path: String,
    pub focus_areas: Vec<String>,
    pub include_suggestions: Option<String>,
    pub language: Option<String>,
    pub output_format: Option<String>,
    pub project_name: Option<String>,
    pub repo_url: Option<String>,
    pub role: Option<String>,
    pub severity_levels: Option<String>,
    pub source_code: String,
    pub years: Option<String>,
}

impl AICodeReviewer {
    pub fn builder() -> AICodeReviewerBuilder {
        AICodeReviewerBuilder::default()
    }
}

#[derive(Default)]
pub struct AICodeReviewerBuilder {
    additional_context: Option<String>,
    branch: Option<String>,
    expertise: Option<Vec<String>>,
    file_path: Option<String>,
    focus_areas: Option<Vec<String>>,
    include_suggestions: Option<String>,
    language: Option<String>,
    output_format: Option<String>,
    project_name: Option<String>,
    repo_url: Option<String>,
    role: Option<String>,
    severity_levels: Option<String>,
    source_code: Option<String>,
    years: Option<String>,
}

impl AICodeReviewerBuilder {
    pub fn additional_context(mut self, value: impl Into<String>) -> Self {
        self.additional_context = Some(value.into());
        self
    }

    pub fn branch(mut self, value: impl Into<String>) -> Self {
        self.branch = Some(value.into());
        self
    }

    pub fn add_expertise(mut self, item: impl Into<String>) -> Self {
        self.expertise.get_or_insert_with(Vec::new).push(item.into());
        self
    }

    pub fn file_path(mut self, value: impl Into<String>) -> Self {
        self.file_path = Some(value.into());
        self
    }

    pub fn add_focus_areas(mut self, item: impl Into<String>) -> Self {
        self.focus_areas.get_or_insert_with(Vec::new).push(item.into());
        self
    }

    pub fn include_suggestions(mut self, value: impl Into<String>) -> Self {
        self.include_suggestions = Some(value.into());
        self
    }

    pub fn language(mut self, value: impl Into<String>) -> Self {
        self.language = Some(value.into());
        self
    }

    pub fn output_format(mut self, value: impl Into<String>) -> Self {
        self.output_format = Some(value.into());
        self
    }

    pub fn project_name(mut self, value: impl Into<String>) -> Self {
        self.project_name = Some(value.into());
        self
    }

    pub fn repo_url(mut self, value: impl Into<String>) -> Self {
        self.repo_url = Some(value.into());
        self
    }

    pub fn role(mut self, value: impl Into<String>) -> Self {
        self.role = Some(value.into());
        self
    }

    pub fn severity_levels(mut self, value: impl Into<String>) -> Self {
        self.severity_levels = Some(value.into());
        self
    }

    pub fn source_code(mut self, value: impl Into<String>) -> Self {
        self.source_code = Some(value.into());
        self
    }

    pub fn years(mut self, value: impl Into<String>) -> Self {
        self.years = Some(value.into());
        self
    }

    pub fn build(self) -> Result<AICodeReviewer, &'static str> {
        Ok(AICodeReviewer {
            additional_context: self.additional_context,
            branch: self.branch.or(Some("main".to_string())),
            expertise: self.expertise.unwrap_or_default(),
            file_path: self.file_path.ok_or("file_path is required")?,
            focus_areas: self.focus_areas.unwrap_or_default(),
            include_suggestions: self.include_suggestions.or(Some("true".to_string())),
            language: self.language.or(Some("Rust".to_string())),
            output_format: self.output_format.or(Some("markdown".to_string())),
            project_name: self.project_name,
            repo_url: self.repo_url,
            role: self.role.or(Some("Senior Software Engineer".to_string())),
            severity_levels: self.severity_levels.or(Some("critical,high,medium,low,info".to_string())),
            source_code: self.source_code.ok_or("source_code is required")?,
            years: self.years.or(Some("10".to_string())),
        })
    }
}

impl AICodeReviewer {
    pub fn render_xml(&self) -> String {
        let mut output = String::new();
        output.push_str("<system_role>");
        output.push_str("You are an expert ");
        output.push_str(self.role.as_deref().unwrap_or("Senior Software Engineer"));
        output.push_str(" specializing in ");
        output.push_str(self.language.as_deref().unwrap_or("Rust"));
        output.push_str(" with ");
        output.push_str(self.years.as_deref().unwrap_or("10"));
        output.push_str(" years of experience.\nYour expertise includes:\n");
        for item in &self.expertise {
            output.push_str("- ");
            output.push_str(item);
            output.push_str("\n");
        }
        output.push_str("</system_role>\n\n");
        if self.project_name.is_some() || self.repo_url.is_some() || self.branch.is_some() || self.additional_context.is_some() {
        output.push_str("<context>");
        output.push_str("Project: ");
        if let Some(ref value) = self.project_name {
            output.push_str(value);
        }
        output.push_str("\nRepository: ");
        if let Some(ref value) = self.repo_url {
            output.push_str(value);
        }
        output.push_str("\nBranch: ");
        output.push_str(self.branch.as_deref().unwrap_or("main"));
        output.push_str("\n");
        if let Some(ref value) = self.additional_context {
            output.push_str(value);
        }
        output.push_str("</context>\n\n");
        }
        output.push_str("<code_to_review>");
        output.push_str("File: ");
        output.push_str(&self.file_path);
        output.push_str("\n");
        output.push_str("```");
        output.push_str(self.language.as_deref().unwrap_or("Rust"));
        output.push_str("\n");
        output.push_str(&self.source_code);
        output.push_str("\n```\n");
        output.push_str("</code_to_review>\n\n");
        if !self.focus_areas.is_empty() {
        output.push_str("<review_focus>");
        output.push_str("Please pay special attention to:\n");
        for item in &self.focus_areas {
            output.push_str("- ");
            output.push_str(item);
            output.push_str("\n");
        }
        output.push_str("</review_focus>\n\n");
        }
        output.push_str("<requirements>");
        output.push_str("Output format: ");
        output.push_str(self.output_format.as_deref().unwrap_or("markdown"));
        output.push_str("\nSeverity levels: ");
        output.push_str(self.severity_levels.as_deref().unwrap_or("critical,high,medium,low,info"));
        output.push_str("\nInclude: ");
        output.push_str(self.include_suggestions.as_deref().unwrap_or("true"));
        output.push_str("</requirements>\n\n");
        output.push_str("<response_template>");
        output.push_str("Provide your review in the following structure:\n1. Summary - Brief overview of code quality\n2. Issues Found - Categorized by severity\n3. Recommendations - Specific actionable improvements\n4. Positive Aspects - What the code does well");
        output.push_str("</response_template>\n\n");
        output.trim_end().to_string()
    }

    pub fn render_markdown(&self) -> String {
        let mut output = String::new();
        output.push_str("# System Role\n\n");
        output.push_str("You are an expert ");
        output.push_str(self.role.as_deref().unwrap_or("Senior Software Engineer"));
        output.push_str(" specializing in ");
        output.push_str(self.language.as_deref().unwrap_or("Rust"));
        output.push_str(" with ");
        output.push_str(self.years.as_deref().unwrap_or("10"));
        output.push_str(" years of experience.\nYour expertise includes:\n");
        for item in &self.expertise {
            output.push_str("- ");
            output.push_str(item);
            output.push_str("\n");
        }
        if !output.ends_with('\n') {
            output.push_str("\n");
        }
        output.push_str("\n");
        if self.project_name.is_some() || self.repo_url.is_some() || self.branch.is_some() || self.additional_context.is_some() {
        output.push_str("# Context\n\n");
        output.push_str("Project: ");
        if let Some(ref value) = self.project_name {
            output.push_str(value);
        }
        output.push_str("\nRepository: ");
        if let Some(ref value) = self.repo_url {
            output.push_str(value);
        }
        output.push_str("\nBranch: ");
        output.push_str(self.branch.as_deref().unwrap_or("main"));
        output.push_str("\n");
        if let Some(ref value) = self.additional_context {
            output.push_str(value);
        }
        if !output.ends_with('\n') {
            output.push_str("\n");
        }
        output.push_str("\n");
        }
        output.push_str("# Code To Review\n\n");
        output.push_str("File: ");
        output.push_str(&self.file_path);
        output.push_str("\n");
        output.push_str("```");
        output.push_str(self.language.as_deref().unwrap_or("Rust"));
        output.push_str("\n");
        output.push_str(&self.source_code);
        output.push_str("\n```\n");
        if !output.ends_with('\n') {
            output.push_str("\n");
        }
        output.push_str("\n");
        if !self.focus_areas.is_empty() {
        output.push_str("# Review Focus\n\n");
        output.push_str("Please pay special attention to:\n");
        for item in &self.focus_areas {
            output.push_str("- ");
            output.push_str(item);
            output.push_str("\n");
        }
        if !output.ends_with('\n') {
            output.push_str("\n");
        }
        output.push_str("\n");
        }
        output.push_str("# Requirements\n\n");
        output.push_str("Output format: ");
        output.push_str(self.output_format.as_deref().unwrap_or("markdown"));
        output.push_str("\nSeverity levels: ");
        output.push_str(self.severity_levels.as_deref().unwrap_or("critical,high,medium,low,info"));
        output.push_str("\nInclude: ");
        output.push_str(self.include_suggestions.as_deref().unwrap_or("true"));
        if !output.ends_with('\n') {
            output.push_str("\n");
        }
        output.push_str("\n");
        output.push_str("# Response Template\n\n");
        output.push_str("Provide your review in the following structure:\n1. Summary - Brief overview of code quality\n2. Issues Found - Categorized by severity\n3. Recommendations - Specific actionable improvements\n4. Positive Aspects - What the code does well");
        if !output.ends_with('\n') {
            output.push_str("\n");
        }
        output.push_str("\n");
        output.trim_end().to_string()
    }

    pub fn render_plain(&self) -> String {
        let mut output = String::new();
        output.push_str("SYSTEM_ROLE:\n");
        output.push_str("You are an expert ");
        output.push_str(self.role.as_deref().unwrap_or("Senior Software Engineer"));
        output.push_str(" specializing in ");
        output.push_str(self.language.as_deref().unwrap_or("Rust"));
        output.push_str(" with ");
        output.push_str(self.years.as_deref().unwrap_or("10"));
        output.push_str(" years of experience.\nYour expertise includes:\n");
        for item in &self.expertise {
            output.push_str("- ");
            output.push_str(item);
            output.push_str("\n");
        }
        if !output.ends_with('\n') {
            output.push_str("\n");
        }
        output.push_str("\n");
        if self.project_name.is_some() || self.repo_url.is_some() || self.branch.is_some() || self.additional_context.is_some() {
        output.push_str("CONTEXT:\n");
        output.push_str("Project: ");
        if let Some(ref value) = self.project_name {
            output.push_str(value);
        }
        output.push_str("\nRepository: ");
        if let Some(ref value) = self.repo_url {
            output.push_str(value);
        }
        output.push_str("\nBranch: ");
        output.push_str(self.branch.as_deref().unwrap_or("main"));
        output.push_str("\n");
        if let Some(ref value) = self.additional_context {
            output.push_str(value);
        }
        if !output.ends_with('\n') {
            output.push_str("\n");
        }
        output.push_str("\n");
        }
        output.push_str("CODE_TO_REVIEW:\n");
        output.push_str("File: ");
        output.push_str(&self.file_path);
        output.push_str("\n");
        output.push_str(&self.source_code);
        output.push_str("\n");
        if !output.ends_with('\n') {
            output.push_str("\n");
        }
        output.push_str("\n");
        if !self.focus_areas.is_empty() {
        output.push_str("REVIEW_FOCUS:\n");
        output.push_str("Please pay special attention to:\n");
        for item in &self.focus_areas {
            output.push_str("- ");
            output.push_str(item);
            output.push_str("\n");
        }
        if !output.ends_with('\n') {
            output.push_str("\n");
        }
        output.push_str("\n");
        }
        output.push_str("REQUIREMENTS:\n");
        output.push_str("Output format: ");
        output.push_str(self.output_format.as_deref().unwrap_or("markdown"));
        output.push_str("\nSeverity levels: ");
        output.push_str(self.severity_levels.as_deref().unwrap_or("critical,high,medium,low,info"));
        output.push_str("\nInclude: ");
        output.push_str(self.include_suggestions.as_deref().unwrap_or("true"));
        if !output.ends_with('\n') {
            output.push_str("\n");
        }
        output.push_str("\n");
        output.push_str("RESPONSE_TEMPLATE:\n");
        output.push_str("Provide your review in the following structure:\n1. Summary - Brief overview of code quality\n2. Issues Found - Categorized by severity\n3. Recommendations - Specific actionable improvements\n4. Positive Aspects - What the code does well");
        if !output.ends_with('\n') {
            output.push_str("\n");
        }
        output.push_str("\n");
        output.trim_end().to_string()
    }
}

